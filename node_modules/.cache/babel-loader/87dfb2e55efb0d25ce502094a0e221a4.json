{"remainingRequest":"/Users/marceltanner/Google Drive/Kreativs/Interaktiv/Self Driving/vue_2_selfdriving/node_modules/babel-loader/lib/index.js!/Users/marceltanner/Google Drive/Kreativs/Interaktiv/Self Driving/vue_2_selfdriving/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/marceltanner/Google Drive/Kreativs/Interaktiv/Self Driving/vue_2_selfdriving/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/marceltanner/Google Drive/Kreativs/Interaktiv/Self Driving/vue_2_selfdriving/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/marceltanner/Google Drive/Kreativs/Interaktiv/Self Driving/vue_2_selfdriving/src/App.vue","mtime":1644165272302},{"path":"/Users/marceltanner/Google Drive/Kreativs/Interaktiv/Self Driving/vue_2_selfdriving/babel.config.js","mtime":1644164865878},{"path":"/Users/marceltanner/Google Drive/Kreativs/Interaktiv/Self Driving/vue_2_selfdriving/node_modules/cache-loader/dist/cjs.js","mtime":1644164856547},{"path":"/Users/marceltanner/Google Drive/Kreativs/Interaktiv/Self Driving/vue_2_selfdriving/node_modules/babel-loader/lib/index.js","mtime":1644164857550},{"path":"/Users/marceltanner/Google Drive/Kreativs/Interaktiv/Self Driving/vue_2_selfdriving/node_modules/cache-loader/dist/cjs.js","mtime":1644164856547},{"path":"/Users/marceltanner/Google Drive/Kreativs/Interaktiv/Self Driving/vue_2_selfdriving/node_modules/vue-loader/lib/index.js","mtime":1644164857852}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAcA;;AAEA;AACAA,aADA;AAEAC,MAFA,kBAEA;AACA;AACAC,eADA;AAEAC,qBAFA;AAGAC,sBAHA;AAIAC,oBAJA;AAKAC,wBALA;AAMAC,eANA;AAOAC,sBAPA;AAQAC,gBARA;AASAC,oBATA;AAUAC;AACAC,gBADA;AAEAC,kBAFA;AAGAC,0BAHA;AAIAC,kBAJA;AAKAC,gBALA;AAMAC,4BANA;AAOAC;AAPA,OAVA;AAmBAC,kBAnBA;AAoBAC,sBApBA;AAqBAC,qBArBA;AAsBAC,qBAtBA;AAuBAC;AAvBA;AAyBA,GA5BA;AA6BAC;AACAC,mBADA,6BACA;AACA;;AACA;AACAC;AACA;;AACA;AACA;AAPA,GA7BA;AAsCAC,SAtCA,qBAsCA;AACA;AACA;AACA;AACA;;AACA;AACAC;AACA,KAFA;;AAGAC;AACAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA,GAzDA;AA0DAC;AACAC,eADA,yBACA;AAAA;;AACAC;AACA;;AACA;AACA;AACA;AACA;AACA;AACA,SALA,MAMA;AACA;;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAlBA;AAmBA,KArBA;AAsBAC,cAtBA,wBAsBA;AACA;AACA;AACA;AACA;AACA;AACA,KA5BA;AA6BAC,SA7BA,mBA6BA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEAC,qCAHA,GAGA,iBAHA;AAIAC,qCAJA,GAIAC,0CAJA;AAMAC,mCANA,GAMA,YANA;AAOAC,mCAPA,GAOAF,iEAPA;AASAG;AACA;;AACA;AAAAC;AAAAC;AAAAC;AAAA;;AACA;AAAAD;AAAAC;AAAA;;AACA;AAAAD;AAAAC;AAAA,oBAbA,CAcA;;;AACA;AAAAC;AAAAC;AAAAC;AAAA;;AAfA;AAAA,uBAiBA,6DAjBA;;AAAA;AAmBAC,oCAnBA,GAmBA,iBAnBA,EAoBA;;AAEA;;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA,KApDA;AAqDAC,cArDA,sBAqDAZ,qBArDA,EAqDAG,mBArDA,EAqDA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDACA;AACAU,4BADA;AAEA;AACAC;AACAC;AACA;AACAX;AACA,qBAJA;AAKAY;AACAZ;AACA;AAPA;AAHA,kBADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA,KAnEA;AAoEAa,WApEA,mBAoEAC,KApEA,EAoEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDACAjB;AACA;;AACA;;AACA;AAEA;AACA,iBANA,CADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,KA5EA;AA6EAkB,aA7EA,uBA6EA;AACA;AACA;AACA;AACA,SAFA,MAGA;AACA;AACA;AACA;;AACA;AACA;AACA,KAxFA;AAyFAC,aAzFA,uBAyFA;AACA;AACA;AACA,KA5FA;AA6FAC,kBA7FA,0BA6FAC,CA7FA,EA6FA;AACA;AACA;AACA,KAhGA;AAiGAC,YAjGA,oBAiGAC,CAjGA,EAiGAC,CAjGA,EAiGAC,CAjGA,EAiGA;AACA;AACA,KAnGA;AAoGAC,gBApGA,wBAoGAC,MApGA,EAoGAC,IApGA,EAoGA;AACA;AACA;;AACA;AACA;AACA,8BACAlD,YADA,EAEAA,gBAFA,EAGA,kBAHA,EAIA,sBAJA;AAOA;AACA;AACA;;AACA;AACAmD;AACAC;AACAC;AACA;;AACAF;AACAC;AACAC;AACAC;AACA;AACA;;AACA;AACA,KA/HA;AAgIAC,WAhIA,qBAgIA;AAEA;AACA,kOAHA,CAKA;;AACA;;AACA;AACA;AACA;AACA;AAEAC;AACA,OAbA,CAeA;;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,oCA7BA,CAgCA;;AACA;AACA,yDAlCA,CAqCA;;AACA;AACA;AACA;;AACA;AACAL;AACAC;AACAC;AACA;;AACAF;AACAC;AACAC;;AACA;AACA5B;AAEA;AACA;AAGA;AAEA,OA1DA,CA+DA;;;AAEA;AACA,oGAlEA,CAqEA;;AACA,6NAtEA,CAwEA;;AACA;;AACA;AACA;AACA;AACA;AAEAgC;AACA,OAhFA,CAmFA;;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;;AACA,qCAjGA,CAmGA;;AACA;AACA,2DArGA,CAuGA;;AACA;;AACA;AACA;AACA;AACA;AACAC;AACA;;AAGA;;AACA;AACAC;AACA;;AAEA;AACA,uDAvHA,CAyHA;;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA,OAjIA,CAoIA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,KApSA;AAqSAC,WArSA,qBAqSA;AACAnC;AACA;AACA;AACA;AACA,KA1SA;AA2SAoC,WA3SA,mBA2SAC,CA3SA,EA2SA;AACA;AACA;AACA,OAFA,MAGA;AACA;AACA;AACA,KAlTA;AAmTAC,SAnTA,iBAmTAD,CAnTA,EAmTA;AACA;AACA;AACA,OAFA,MAGA;AACA;AACA;AACA;AA1TA;AA1DA","names":["name","data","ctx","worldWidth","worldHeight","imgWorld","worldLoaded","fps","fpsCounter","tick","tickTime","car","width","length","x","y","speed","steeringSpeed","angle","viewSize","viewReduction","inputValues","training","model","computed","reducedViewSize","reducedSize","mounted","app","document","methods","refreshLoop","window","enterFrame","train","featureValuesTraining","featureTensorTraining","tf","labelValuesTraining","labelTensorTraining","console","inputShape","activation","units","loss","optimizer","metrics","featureValuesTesting","trainModel","epochs","callbacks","onEpochEnd","onTrainEnd","predict","input","calculate","drawWorld","componentToHex","c","rgbToHex","r","g","b","reducePixels","pixels","size","totalR","totalG","totalB","pixelsReduced","drawCar","carSnapshotPixels","viewSnapshotPixels","viewPixels","viewPixelsReduced","restart","keyDown","e","keyUp"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\n  <div class=\"world\">\n    <canvas ref=\"canvas\" :width=\"worldWidth\" :height=\"worldHeight\"></canvas>\n  </div>\n  <canvas class=\"car-snapshot-canvas\" ref=\"carSnapshotCanvas\" :width=\"car.length*1.5\" :height=\"car.length*1.5\"></canvas>\n  <canvas class=\"view-snapshot-canvas\" ref=\"viewSnapshotCanvas\" :width=\"viewSize*1.5\" :height=\"viewSize*1.5\"></canvas>\n  <canvas class=\"car-canvas\" ref=\"carCanvas\" :width=\"car.width\" :height=\"car.length\"></canvas>\n  <canvas class=\"view-canvas\" ref=\"viewCanvas\" :width=\"viewSize\" :height=\"viewSize\"></canvas>\n  <canvas class=\"view-canvas-reduced\" ref=\"viewCanvasReduced\" :width=\"reducedViewSize\" :height=\"reducedViewSize\"></canvas>\n  <span class=\"fps\">{{ fps }} fps</span>\n</template>\n\n<script>\n\nconst tf = require('@tensorflow/tfjs');\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      ctx: null,\n      worldWidth: 256,\n      worldHeight: 256,\n      imgWorld: null,\n      worldLoaded: false,\n      fps: null,\n      fpsCounter: null,\n      tick: true,\n      tickTime: null,\n      car: {\n        width: 8,\n        length: 16,\n        x: 256 / 2 * 0.333,\n        y: 256 / 2,\n        speed: 1,\n        steeringSpeed: 0.025,\n        angle: 0\n      },\n      viewSize: 40,\n      viewReduction: 3,\n      inputValues: [],\n      training: false,\n      model: null\n    }\n  },\n  computed: {\n    reducedViewSize() {\n      let reducedSize = this.viewSize;\n      for( let i = 0; i < this.viewReduction; i++ ) {\n        reducedSize = reducedSize / 2;\n      }\n      return reducedSize;\n    }\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    this.imgWorld = new Image(this.worldWidth,this.worldHeight);\n    this.imgWorld.src = require('/src/assets/world.jpg');\n    const app = this;\n    this.imgWorld.onload = function() {\n      app.worldLoaded = true;\n    }\n    document.addEventListener('keydown', this.keyDown);\n    document.addEventListener('keyup', this.keyUp);\n\n    this.ctxViewSnapshot = this.$refs.viewSnapshotCanvas.getContext(\"2d\");\n    this.ctxCarSnapshot = this.$refs.carSnapshotCanvas.getContext(\"2d\");\n\n    this.ctxCar = this.$refs.carCanvas.getContext(\"2d\");\n    this.ctxView = this.$refs.viewCanvas.getContext(\"2d\");\n    this.ctxViewReduced = this.$refs.viewCanvasReduced.getContext(\"2d\");\n\n    this.refreshLoop();\n  },\n  methods: {\n    refreshLoop() {\n      window.requestAnimationFrame(() => {\n        const now = performance.now();\n        if( this.tick ) {\n          this.tickTime = now;\n          this.fps = this.fpsCounter;\n          this.fpsCounter = 0;\n          this.tick = false;\n        }\n        else {\n          this.fpsCounter++;\n          if( now >= this.tickTime + 1000 ) {\n            this.tick = true;\n          }\n        }\n\n        this.enterFrame();\n\n        this.refreshLoop();\n      });\n    },\n    enterFrame() {\n      if( this.worldLoaded && !this.training ) {\n        this.drawWorld();\n        this.calculate();\n        this.drawCar();\n      }\n    },\n    async train() {\n      this.training = true;\n\n      const featureValuesTraining =  [ [0.5,0.5,0.5] ];\n      const featureTensorTraining = tf.tensor2d( featureValuesTraining, [1, 3] );\n\n      const labelValuesTraining =  [ [0.5,0.5] ];\n      const labelTensorTraining = tf.tensor2d( labelValuesTraining, [labelValuesTraining.length, 2] );\n\n      console.log(\"creating model ...\");\n      this.model = tf.sequential();\n      this.model.add(tf.layers.dense({inputShape: 3, activation: \"sigmoid\", units: 5}));\n      this.model.add(tf.layers.dense({activation: \"relu\", units: 10}));\n      this.model.add(tf.layers.dense({activation: \"sigmoid\", units: 2}));\n      //this.model.compile({loss:'binaryCrossentropy',optimizer:tf.train.rmsprop(0.1),metrics:['accuracy']});\n      this.model.compile({loss:'categoricalCrossentropy',optimizer:tf.train.adam(),metrics:['accuracy']});\n\n      await this.trainModel( featureTensorTraining, labelTensorTraining );\n\n      const featureValuesTesting =  [ [0.5,0.5,0.5] ];\n      //console.log( await this.predict(featureValuesTesting) );\n\n      this.training = false;\n    },\n    async trainModel( featureTensorTraining, labelTensorTraining ) {\n      return this.model.fit( featureTensorTraining, labelTensorTraining, {\n        epochs: 10,\n        //validationSplit: 0.2,\n        callbacks: {\n          onEpochEnd: function(epoch) {\n            //predict( featureValuesTesting[0] );\n            console.log(\"epoch \"+epoch)\n          },\n          onTrainEnd: function() {\n            console.log(\"done\");\n          }\n        }\n      });\n    },\n    async predict( input ) {\n      return tf.tidy( () => {\n        const inputTensor = tf.tensor2d([input],[1, 3]);\n        const outputTensor = this.model.predict( inputTensor );\n        const outputValue = outputTensor.dataSync();\n\n        return outputValue;\n      });\n    },\n    calculate() {\n      if( this.car.steering ) {\n        if( this.car.steering === \"left\" ) {\n          this.car.angle -= this.car.steeringSpeed;\n        }\n        else {\n          this.car.angle += this.car.steeringSpeed;\n        }\n      }\n      this.car.x += Math.sin( this.car.angle ) *this.car.speed;\n      this.car.y -= Math.cos( this.car.angle ) *this.car.speed;\n    },\n    drawWorld() {\n      this.ctx.clearRect( 0, 0, this.ctx.canvas.width, this.ctx.canvas.height );\n      this.ctx.drawImage( this.imgWorld, 0, 0, this.ctx.canvas.width, this.ctx.canvas.height );\n    },\n    componentToHex(c) {\n      var hex = c.toString(16);\n      return hex.length == 1 ? \"0\" + hex : hex;\n    },\n    rgbToHex(r, g, b) {\n      return \"#\" + this.componentToHex(r) + this.componentToHex(g) + this.componentToHex(b);\n    },\n    reducePixels(pixels,size) {\n      // reduce resolution\n      let pixelsReduced = [];\n      for( let y = 0; y < size; y+=2 ) {\n        for( let x = 0; x < size; x+=2 ) {\n          const pixelIndexes = [\n            y*size + x,\n            y*size + x +1,\n            (y+1)*size + x,\n            (y+1)*size + x +1,\n          ];\n\n          let totalR = 0;\n          let totalG = 0;\n          let totalB = 0;\n          for( let i = 0; i < pixelIndexes.length; i++ ) {\n            totalR += pixels[pixelIndexes[i]][0];\n            totalG += pixels[pixelIndexes[i]][1];\n            totalB += pixels[pixelIndexes[i]][2];\n          }\n          totalR = Math.round( totalR / pixelIndexes.length );\n          totalG = Math.round( totalG / pixelIndexes.length );\n          totalB = Math.round( totalB / pixelIndexes.length );\n          pixelsReduced.push( [totalR,totalG,totalB] );\n        }\n      }\n      return pixelsReduced;\n    },\n    drawCar() {\n\n      // get car image\n      this.snapshotWhereCarIs = this.ctx.getImageData( this.car.x - this.ctxCarSnapshot.canvas.width/2, this.car.y - this.ctxCarSnapshot.canvas.height/2, this.ctxCarSnapshot.canvas.width, this.ctxCarSnapshot.canvas.height );\n\n      // read pixels\n      let carSnapshotPixels = [];\n      for( let i = 0; i < this.snapshotWhereCarIs.data.length; i += 4 ) {\n        const r = this.snapshotWhereCarIs.data[i];\n        const g = this.snapshotWhereCarIs.data[i+1];\n        const b = this.snapshotWhereCarIs.data[i+2];\n\n        carSnapshotPixels.push( [r,g,b] );\n      }\n\n      // draw rotated image\n      this.ctxCarSnapshot.save();\n      this.ctxCarSnapshot.clearRect( 0, 0, this.ctxCarSnapshot.canvas.width, this.ctxCarSnapshot.canvas.height );\n      this.ctxCarSnapshot.translate( this.ctxCarSnapshot.canvas.width/2, this.ctxCarSnapshot.canvas.height/2 );\n      this.ctxCarSnapshot.rotate( -this.car.angle );\n      this.ctxCarSnapshot.translate( -this.ctxCarSnapshot.canvas.width/2, -this.ctxCarSnapshot.canvas.height/2 );\n      for( let y = 0; y < this.ctxCarSnapshot.canvas.height; y++ ) {\n        for( let x = 0; x < this.ctxCarSnapshot.canvas.width; x++ ) {\n          const pixelIndex = y*this.ctxCarSnapshot.canvas.width + x;\n          const color = this.rgbToHex( carSnapshotPixels[pixelIndex][0], carSnapshotPixels[pixelIndex][1], carSnapshotPixels[pixelIndex][2] );\n          this.ctxCarSnapshot.fillStyle = color;\n          this.ctxCarSnapshot.fillRect( x, y, 1.5, 1.5 );\n        }\n      }\n      this.ctxCarSnapshot.restore();\n\n\n      // get car image\n      this.imgWhereCarIs = this.ctxCarSnapshot.getImageData( this.ctxCarSnapshot.canvas.width/2 - this.ctxCar.canvas.width/2, this.ctxCarSnapshot.canvas.height/2 - this.ctxCar.canvas.height/2, this.ctxCar.canvas.width, this.ctxCar.canvas.height );\n      this.ctxCar.putImageData(this.imgWhereCarIs, 0, 0);\n\n\n      // read pixels\n      let totalR = 0;\n      let totalG = 0;\n      let totalB = 0;\n      for( let i = 0; i < this.imgWhereCarIs.data.length; i += 4 ) {\n        totalR += this.imgWhereCarIs.data[i];\n        totalG += this.imgWhereCarIs.data[i+1];\n        totalB += this.imgWhereCarIs.data[i+2];\n      }\n      totalR = Math.round( totalR / (this.imgWhereCarIs.data.length /4) );\n      totalG = Math.round( totalG / (this.imgWhereCarIs.data.length /4) );\n      totalB = Math.round( totalB / (this.imgWhereCarIs.data.length /4) );\n      if( totalR + totalG + totalB < 760 ) {\n        console.log(\"collision\");\n\n        this.inputValues = [];\n        this.restart();\n\n\n        this.train();\n\n      }\n\n\n\n\n      // view\n\n      const viewX = this.car.x + Math.sin( this.car.angle ) * (this.car.length/2+this.viewSize/2);\n      const viewY = this.car.y - Math.cos( this.car.angle ) * (this.car.length/2+this.viewSize/2);\n\n\n      // get view image\n      this.snapshotWhereViewIs = this.ctx.getImageData( viewX - this.ctxViewSnapshot.canvas.width/2, viewY - this.ctxViewSnapshot.canvas.height/2, this.ctxViewSnapshot.canvas.width, this.ctxViewSnapshot.canvas.height );\n\n      // read pixels\n      let viewSnapshotPixels = [];\n      for( let i = 0; i < this.snapshotWhereViewIs.data.length; i += 4 ) {\n        const r = this.snapshotWhereViewIs.data[i];\n        const g = this.snapshotWhereViewIs.data[i+1];\n        const b = this.snapshotWhereViewIs.data[i+2];\n\n        viewSnapshotPixels.push( [r,g,b] );\n      }\n\n\n      // draw rotated image\n      this.ctxViewSnapshot.save();\n      this.ctxViewSnapshot.clearRect( 0, 0, this.ctxViewSnapshot.canvas.width, this.ctxViewSnapshot.canvas.height );\n      this.ctxViewSnapshot.translate( this.ctxViewSnapshot.canvas.width/2, this.ctxViewSnapshot.canvas.height/2 );\n      this.ctxViewSnapshot.rotate( -this.car.angle );\n      this.ctxViewSnapshot.translate( -this.ctxViewSnapshot.canvas.width/2, -this.ctxViewSnapshot.canvas.height/2 );\n      for( let y = 0; y < this.ctxViewSnapshot.canvas.height; y++ ) {\n        for( let x = 0; x < this.ctxViewSnapshot.canvas.width; x++ ) {\n          const pixelIndex = y*this.ctxViewSnapshot.canvas.width + x;\n          const color = this.rgbToHex( viewSnapshotPixels[pixelIndex][0], viewSnapshotPixels[pixelIndex][1], viewSnapshotPixels[pixelIndex][2] );\n          this.ctxViewSnapshot.fillStyle = color;\n          this.ctxViewSnapshot.fillRect( x, y, 1.5, 1.5 );\n        }\n      }\n      this.ctxViewSnapshot.restore();\n\n      // get view image\n      this.imgWhereViewIs = this.ctxViewSnapshot.getImageData( this.ctxViewSnapshot.canvas.width/2 - this.ctxView.canvas.width/2, this.ctxViewSnapshot.canvas.height/2 - this.ctxView.canvas.height/2, this.ctxView.canvas.width, this.ctxView.canvas.height );\n      this.ctxView.putImageData(this.imgWhereViewIs, 0, 0);\n\n      // read pixels\n      let viewPixels = [];\n      for( let i = 0; i < this.imgWhereViewIs.data.length; i += 4 ) {\n        const r = this.imgWhereViewIs.data[i];\n        const g = this.imgWhereViewIs.data[i+1];\n        const b = this.imgWhereViewIs.data[i+2];\n        viewPixels.push( [r,g,b] );\n      }\n\n\n      let viewPixelsReduced = viewPixels;\n      for( let i = 0; i < this.viewReduction; i++ ) {\n        viewPixelsReduced = this.reducePixels( viewPixelsReduced, Math.sqrt(viewPixelsReduced.length) );\n      }\n\n      this.inputValues.unshift(viewPixelsReduced);\n      this.inputValues = this.inputValues.slice(0,16);\n\n      // draw reduced view\n      for( let y = 0; y < this.ctxViewReduced.canvas.height; y++ ) {\n        for( let x = 0; x < this.ctxViewReduced.canvas.width; x++ ) {\n          const pixelIndex = y*this.ctxViewReduced.canvas.width + x;\n          const color = this.rgbToHex( viewPixelsReduced[pixelIndex][0], viewPixelsReduced[pixelIndex][1], viewPixelsReduced[pixelIndex][2] );\n          this.ctxViewReduced.fillStyle = color;\n          this.ctxViewReduced.fillRect( x, y, 1.5, 1.5 );\n        }\n      }\n\n\n      // draw car\n      this.ctx.save();\n      this.ctx.translate( this.car.x, this.car.y );\n      this.ctx.rotate( this.car.angle );\n      this.ctx.translate( -this.car.x, -this.car.y );\n      this.ctx.fillRect( this.car.x -this.car.width/2, this.car.y -this.car.length/2, this.car.width, this.car.length );\n      this.ctx.restore();\n\n\n      /*\n\n      // draw view snapshot rect\n      this.ctx.save();\n      this.ctx.strokeStyle = \"#ff0000\";\n      this.ctx.beginPath();\n      this.ctx.rect( viewX -this.ctxViewSnapshot.canvas.width/2, viewY -this.ctxViewSnapshot.canvas.height/2, this.ctxViewSnapshot.canvas.width, this.ctxViewSnapshot.canvas.height );\n      this.ctx.stroke();\n      this.ctx.restore();\n      */\n\n\n      // draw view rect\n      this.ctx.save();\n      this.ctx.translate( viewX, viewY );\n      this.ctx.rotate( this.car.angle );\n      this.ctx.translate( -viewX, -viewY );\n      this.ctx.strokeStyle = \"#ff0000\";\n      this.ctx.beginPath();\n      this.ctx.rect( viewX -this.ctxView.canvas.width/2, viewY -this.ctxView.canvas.height/2, this.ctxView.canvas.width, this.ctxView.canvas.height );\n      this.ctx.stroke();\n      this.ctx.restore();\n\n    },\n    restart() {\n      console.log( \"restart \");\n      this.car.x = this.worldWidth / 2 * 0.333;\n      this.car.y = this.worldHeight / 2;\n      this.car.angle = 0;\n    },\n    keyDown(e) {\n      if( e.code === \"ArrowLeft\" ) {\n        this.car.steering = \"left\";\n      }\n      else if( e.code === \"ArrowRight\" ) {\n        this.car.steering = \"right\";\n      }\n    },\n    keyUp(e) {\n      if( e.code === \"ArrowLeft\" ) {\n        this.car.steering = undefined;\n      }\n      else if( e.code === \"ArrowRight\" ) {\n        this.car.steering = undefined;\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n\nbody {\n  margin: 0;\n  height: 100vh;\n  font-family: sans-serif;\n}\n#app {\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: black;\n}\n\n.world {\n  position: relative;\n  width: 50%;\n  height: 0;\n  padding-top: 50%;\n  canvas {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n}\n\n\n.car-snapshot-canvas {\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  border: 1px solid white;\n  image-rendering: pixelated;\n  width: 10%;\n  display: none;\n}\n.car-canvas {\n  position: absolute;\n  bottom: 8px;\n  left: 8px;\n  border: 1px solid white;\n  image-rendering: pixelated;\n  width: 15%;\n  display: none;\n}\n.view-snapshot-canvas {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  border: 1px solid white;\n  image-rendering: pixelated;\n  width: 10%;\n  display: none;\n}\n.view-canvas {\n  position: absolute;\n  bottom: 8px;\n  right: 8px;\n  border: 1px solid white;\n  image-rendering: pixelated;\n  width: 10%;\n  display: none;\n}\n.view-canvas-reduced {\n  position: absolute;\n  bottom: 8px;\n  right: 8px;\n  border: 1px solid white;\n  image-rendering: pixelated;\n  width: 15%;\n}\n\n\n\n.fps {\n  position: absolute;\n  top: 8px;\n  left: 50%;\n  color: #333333;\n}\n\n</style>\n"]}]}