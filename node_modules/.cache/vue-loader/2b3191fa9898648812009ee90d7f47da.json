{"remainingRequest":"/Users/marceltanner/Google Drive/Kreativs/Interaktiv/Self Driving/vue_2_selfdriving/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/marceltanner/Google Drive/Kreativs/Interaktiv/Self Driving/vue_2_selfdriving/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/marceltanner/Google Drive/Kreativs/Interaktiv/Self Driving/vue_2_selfdriving/src/App.vue","mtime":1662140713216},{"path":"/Users/marceltanner/Google Drive/Kreativs/Interaktiv/Self Driving/vue_2_selfdriving/node_modules/babel-loader/lib/index.js","mtime":1644164857550},{"path":"/Users/marceltanner/Google Drive/Kreativs/Interaktiv/Self Driving/vue_2_selfdriving/node_modules/cache-loader/dist/cjs.js","mtime":1644164856547},{"path":"/Users/marceltanner/Google Drive/Kreativs/Interaktiv/Self Driving/vue_2_selfdriving/node_modules/vue-loader/lib/index.js","mtime":1644164857852}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"world\">\n      <canvas class=\"world-canvas\" ref=\"canvas\" :width=\"worldWidth\" :height=\"worldHeight\"></canvas>\n      <div class=\"training\" v-if=\"training\"><span>TRAINING<br>{{trainingProgress}}% ({{trainingSamples.length}})</span></div>\n    </div>\n    <canvas class=\"car-snapshot-canvas\" ref=\"carSnapshotCanvas\" :width=\"car.length*1.5\" :height=\"car.length*1.5\"></canvas>\n    <canvas class=\"view-snapshot-canvas\" ref=\"viewSnapshotCanvas\" :width=\"viewSize*1.5\" :height=\"viewSize*1.5\"></canvas>\n    <canvas class=\"car-canvas\" ref=\"carCanvas\" :width=\"car.width\" :height=\"car.length\"></canvas>\n    <canvas class=\"view-canvas\" ref=\"viewCanvas\" :width=\"viewSize\" :height=\"viewSize\"></canvas>\n    <canvas class=\"view-canvas-reduced\" ref=\"viewCanvasReduced\" :width=\"reducedViewSize\" :height=\"reducedViewSize\"></canvas>\n    <span class=\"fps\">{{ fps }} fps</span>\n    <div class=\"highscores\">\n      <div class=\"duration\">\n        <label>Total Duration</label>\n        {{durationString}}\n      </div>\n      <label>Highscores ({{highscores.length}})</label>\n      <ul>\n        <li v-for=\"(highscore,index) in highscoresShown\" :key=\"index\"><b>{{models[highscore.modelIndex].name}} - </b> {{highscore.score}}</li>\n        <!-- <li v-if=\"highscores.length\">last: {{highscores[highscores.length-1].score}}</li> -->\n      </ul>\n    </div>\n    <div class=\"score\">\n      <div class=\"current\">\n        <label>Current Score</label>\n        {{score}}\n      </div>\n      <div class=\"last\">\n        <label>Last Score</label>\n        {{lastScore}}\n      </div>\n    </div>\n    <div class=\"stats\">\n      <canvas class=\"stats-canvas\" ref=\"statsCanvas\" :width=\"40\" :height=\"500\"></canvas>\n    </div>\n    <div class=\"models\">\n      <label>Drivers</label>\n      <ul>\n        <li v-for=\"(model,index) in models\" :key=\"index\" :class=\"{'active':index === modelIndex}\">\n          <template v-if=\"model\">\n            {{ model.name }}\n            <span class=\"layers\">\n              [\n              <template v-for=\"(layer) in model.layers\">{{layer.units}} {{layer.activation}}, </template>\n              ]\n            </span>{{model.highscore||\"–\"}} (t: {{model.trainings}})\n          </template>\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\n\nconst tf = require('@tensorflow/tfjs');\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      ctx: null,\n      worldWidth: 256,\n      worldHeight: 256,\n      imgWorld: null,\n      worldLoaded: false,\n      fps: null,\n      fpsCounter: null,\n      tick: true,\n      tickTime: null,\n      duration: -1,\n      durationString: null,\n      car: {\n        width: 8,\n        length: 16,\n        x: 256 / 2 * 0.25,\n        y: 256 / 2 * 1.5,\n        speed: 0.5,\n        steeringSpeed: 0.025,\n        angle: 0\n      },\n      viewSize: 32,\n      viewReduction: 4,\n      viewReducedSize: null,\n      viewPixels: null,\n      steering: null,\n      samples: [],\n      samplesMaxLength: 4096,\n      trainingSamples: null,\n      trainingSamplesMaxLength: 4096,\n      badRewards: 0,\n      badRewardsInARow: 0,\n      score: 0,\n      lastScore: null,\n      highscores: [],\n      highscoresMaxLength: 10,\n      highscoresMaxShown: 10,\n      training: false,\n      trainingProgress: 0,\n      models: undefined,\n      numberOfModels: 5,\n      modelIndex: 0\n    }\n  },\n  computed: {\n    reducedViewSize() {\n      let reducedSize = this.viewSize;\n      for( let i = 0; i < this.viewReduction; i++ ) {\n        reducedSize = reducedSize / 2;\n      }\n      return reducedSize;\n    },\n    highscoresShown() {\n      return this.highscores.slice(0,this.highscoresMaxShown);\n    }\n  },\n  mounted() {\n    this.ctx = this.$refs.canvas.getContext(\"2d\");\n    this.imgWorld = new Image(this.worldWidth,this.worldHeight);\n    this.imgWorld.src = require('/src/assets/world4.jpg');\n    const app = this;\n    this.imgWorld.onload = function() {\n      app.worldLoaded = true;\n    }\n    //document.addEventListener('keydown', this.keyDown);\n    //document.addEventListener('keyup', this.keyUp);\n\n    this.ctxViewSnapshot = this.$refs.viewSnapshotCanvas.getContext(\"2d\");\n    this.ctxCarSnapshot = this.$refs.carSnapshotCanvas.getContext(\"2d\");\n\n    this.ctxCar = this.$refs.carCanvas.getContext(\"2d\");\n    this.ctxView = this.$refs.viewCanvas.getContext(\"2d\");\n    this.ctxViewReduced = this.$refs.viewCanvasReduced.getContext(\"2d\");\n\n    this.ctxStats = this.$refs.statsCanvas.getContext(\"2d\");\n\n\n    this.viewReducedSize = this.viewSize;\n    for( let i = 0; i < this.viewReduction; i++ ) {\n      this.viewReducedSize = this.viewReducedSize / 2;\n    }\n\n    this.models = new Array(this.numberOfModels);\n    this.createModel(this.modelIndex);\n\n    this.refreshLoop();\n  },\n  methods: {\n    createModel( modelIndex ) {\n      console.log(\"creating model ...\");\n      const numberOfLayers =  2;\n      let layers = new Array( numberOfLayers );\n      for( let i = numberOfLayers-1; i >= 0; i-- ) {\n        if( i === numberOfLayers-1 ) {\n          // last layer\n          layers[i] = {\n            units: 1,\n            activation: \"sigmoid\"\n          };\n        }\n        else {\n          layers[i] = {\n            units: 3 + Math.ceil( Math.random()*15 ),\n            activation: [\"relu\",\"sigmoid\"][Math.round(Math.random())]\n          };\n        }\n      }\n      this.models[modelIndex] = {\n        layers: layers,\n        trainings: 0,\n        highscore: undefined,\n        name: modelIndex+1,\n        children: 0\n      };\n\n      // create model with layers\n      this.models[modelIndex].model = tf.sequential();\n      for( let i = 0; i < layers.length; i++ ) {\n        if( i === 0 ) {\n          // first layer\n          this.models[modelIndex].model.add(tf.layers.dense({inputShape: this.viewReducedSize*this.viewReducedSize, activation: layers[i].activation, units: layers[i].units}));\n        }\n        else {\n          this.models[modelIndex].model.add(tf.layers.dense({activation: layers[i].activation, units: layers[i].units}));\n        }\n      }\n      /*\n      this.models[i].model.add(tf.layers.dense({inputShape: this.viewReducedSize*this.viewReducedSize, activation: \"relu\", units: 10}));\n      this.models[i].model.add(tf.layers.dense({activation: \"relu\", units: 5}));\n      this.models[i].model.add(tf.layers.dense({activation: \"sigmoid\", units: 1}));\n      */\n      //this.models[i].add(tf.layers.dense({activation: \"relu\", units: 1}));\n      this.models[modelIndex].model.compile({loss:'binaryCrossentropy',optimizer:tf.train.rmsprop(0.1),metrics:['accuracy']});\n      //this.model.compile({loss:'categoricalCrossentropy',optimizer:tf.train.adam(),metrics:['accuracy']});\n    },\n    async train() {\n\n      // check if new highscore:\n      let highscoreOfModel = this.highscores.find(el => el.modelIndex === this.modelIndex );\n      if( highscoreOfModel ) {\n        this.models[this.modelIndex].highscore = highscoreOfModel.score;\n      }\n\n      // switch to next model\n      this.modelIndex = (this.modelIndex +1) % this.numberOfModels;\n\n      // create or make clone, if necessary\n      if( !this.models[this.modelIndex] ) {\n        this.createModel(this.modelIndex);\n      }\n      else {\n        // check for new highscore\n        let highscoreOfModel = this.highscores.find(el => el.modelIndex === this.modelIndex );\n        if( !highscoreOfModel ) {\n          // replace model\n\n          let random = Math.random();\n          let highscoreIndex;\n          if( random > 1-0.182 ) {\n            highscoreIndex = 0;\n          }\n          else if( random > 1 - 0.182 - 0.163) {\n            highscoreIndex = 1;\n          }\n          else if( random > 1 - 0.182 - 0.163 - 0.146 ) {\n            highscoreIndex = 2;\n          }\n          else if( random > 1 - 0.182 - 0.163 - 0.146 - 0.127 ) {\n            highscoreIndex = 3;\n          }\n          else if( random > 1 - 0.182 - 0.163 - 0.146 - 0.127 - 0.109 ) {\n            highscoreIndex = 4;\n          }\n          else if( random > 1 - 0.182 - 0.163 - 0.146 - 0.127 - 0.109 - 0.091 ) {\n            highscoreIndex = 5;\n          }\n          else if( random > 1 - 0.182 - 0.163 - 0.146 - 0.127 - 0.109 - 0.091 - 0.073 ) {\n            highscoreIndex = 6;\n          }\n          else if( random > 1 - 0.182 - 0.163 - 0.146 - 0.127 - 0.109 - 0.091 - 0.073 - 0.054 ) {\n            highscoreIndex = 7;\n          }\n          else if( random > 1 - 0.182 - 0.163 - 0.146 - 0.127 - 0.109 - 0.091 - 0.073 - 0.054 - 0.037 ) {\n            highscoreIndex = 8;\n          }\n          else if( random > 1 - 0.182 - 0.163 - 0.146 - 0.127 - 0.109 - 0.091 - 0.073 - 0.054 - 0.037 - 0.018 ) {\n            highscoreIndex = 9;\n          }\n\n          const mother = this.models[ this.highscores[highscoreIndex].modelIndex ];\n          this.models[this.modelIndex] = {...mother};\n          this.models[this.modelIndex].trainings = 0;\n          this.models[this.modelIndex].highscore = undefined;\n          mother.children++;\n          this.models[this.modelIndex].name = mother.name+\".\"+mother.children;\n        }\n\n      }\n\n      this.training = true;\n\n      this.trainingSamples = [];\n      for( let i = 0; i < this.highscores.length; i++ ) {\n        let samples = [];\n        for( let j = 0; j < this.highscores[i].samples.length; j++ ) {\n          if( this.highscores[i].samples[j].reward > 0.5 ) {\n            // use only good rewards\n            samples.push( this.highscores[i].samples[j] );\n          }\n        }\n        this.trainingSamples.push(...samples);\n      }\n      // randomise and slice\n      this.trainingSamples.sort(function(){return 0.5 - Math.random()});\n      this.trainingSamples = this.trainingSamples.slice(0,this.trainingSamplesMaxLength);\n\n      console.log(\"total number of samples: \"+this.trainingSamples.length);\n\n      let featureValuesTraining = [];\n      let labelValuesTraining = [];\n      for( let i = 0; i < this.trainingSamples.length; i++ ) {\n        let featureValueTraining = [...this.trainingSamples[i].state];\n        //featureValueTraining.push( this.trainingSamples[i].reward );\n        featureValuesTraining.push( featureValueTraining );\n        labelValuesTraining.push( this.trainingSamples[i].action );\n      }\n      const featureTensorTraining = tf.tensor2d( featureValuesTraining, [featureValuesTraining.length, featureValuesTraining[0].length] );\n      const labelTensorTraining = tf.tensor2d( labelValuesTraining, [labelValuesTraining.length, 1] );\n\n      console.log(\"train model ...\");\n      await this.trainModel( this.modelIndex, featureTensorTraining, labelTensorTraining, Math.min(10, this.trainingSamplesMaxLength/this.trainingSamples.length)*10 );\n\n      this.training = false;\n      this.trainingProgress = 0;\n\n      this.models[this.modelIndex].trainings += 1;\n    },\n    async trainModel( modelIndex, featureTensorTraining, labelTensorTraining, epochs ) {\n      const ref = this;\n      return this.models[modelIndex].model.fit( featureTensorTraining, labelTensorTraining, {\n        epochs,\n        //validationSplit: 0.2,\n        callbacks: {\n          onEpochEnd: function(epoch) {\n            ref.trainingProgress = Math.round( epoch / epochs * 100 );\n          },\n          onTrainEnd: function() {\n            console.log(\"done\");\n          }\n        }\n      });\n    },\n    async predict( modelIndex, input ) {\n      return tf.tidy( () => {\n        const inputTensor = tf.tensor2d([input],[1, this.viewReducedSize*this.viewReducedSize]);\n        const outputTensor = this.models[modelIndex].model.predict( inputTensor );\n        const outputValue = outputTensor.dataSync();\n\n        return outputValue;\n      });\n    },\n    async getSteering() {\n      this.prediction = await this.predict( this.modelIndex, this.testingDataInput );\n      this.prediction = Math.max( 0, this.prediction  )\n      return this.prediction;\n    },\n    refreshLoop() {\n      window.requestAnimationFrame(() => {\n        const now = performance.now();\n        if( this.tick ) {\n          this.tickTime = now;\n          this.fps = this.fpsCounter;\n          this.fpsCounter = 0;\n          this.tick = false;\n\n          this.duration++;\n          const date = new Date(0);\n          date.setSeconds(this.duration); // specify value for SECONDS here\n          this.durationString = date.toISOString().substr(11, 8);\n        }\n        else {\n          this.fpsCounter++;\n          if( now >= this.tickTime + 1000 ) {\n            this.tick = true;\n          }\n        }\n\n        this.enterFrame();\n\n        this.refreshLoop();\n      });\n    },\n    enterFrame() {\n      if( this.worldLoaded && !this.training ) {\n        this.drawWorld();\n        this.getView();\n        this.moveCar();\n      }\n    },\n    drawStats() {\n      this.ctxStats.clearRect( 0, 0, this.ctxStats.canvas.width, this.ctxStats.canvas.height );\n      //this.ctxStats.fillRect(0, 0, this.ctxStats.canvas.width, this.ctxStats.canvas.height);\n      //this.ctxStats.strokeStyle = \"#ffffff\";\n      const numberOfsamplesDrawn = Math.min(512, this.samples.length);\n      for( let i = 0; i < numberOfsamplesDrawn; i++ ) {\n        /*\n        this.ctxStats.moveTo( this.samples[i].action * this.ctxStats.canvas.width, this.ctxStats.canvas.height/this.samples.length * i );\n        this.ctxStats.lineTo( this.samples[i+1].action * this.ctxStats.canvas.width, this.ctxStats.canvas.height/this.samples.length * (i+1) );\n        */\n        this.ctxStats.beginPath();\n        this.ctxStats.fillStyle = \"#ffffff\";\n        this.ctxStats.arc(this.samples[i].actionPredicted * this.ctxStats.canvas.width, this.ctxStats.canvas.height/numberOfsamplesDrawn * i, 1, 0, 2 * Math.PI);\n        this.ctxStats.fill();\n\n        this.ctxStats.beginPath();\n        let rgb;\n        if( this.samples[i].reward >= 0.5 ) {\n          //rgb = \"#00ff00\";\n          rgb = \"#00\"+ Math.round( this.samples[i].reward * 255 ).toString(16) + \"00\";\n          this.ctxStats.fillStyle = rgb;\n          this.ctxStats.arc(this.samples[i].action * this.ctxStats.canvas.width, this.ctxStats.canvas.height/numberOfsamplesDrawn * i, 1, 0, 2 * Math.PI);\n          this.ctxStats.fill();\n        }\n        else {\n          //rgb = \"#ff0000\";\n          rgb = \"#\"+ Math.round( (1-this.samples[i].reward) * 255 ).toString(16) + \"0000\";\n          this.ctxStats.fillStyle = rgb;\n          this.ctxStats.arc(this.samples[i].action * this.ctxStats.canvas.width, this.ctxStats.canvas.height/numberOfsamplesDrawn * i, 1, 0, 2 * Math.PI);\n          this.ctxStats.fill();\n        }\n      }\n      //this.ctxStats.stroke();\n    },\n    moveCar() {\n      this.testingDataInput = [...this.viewPixels];\n      //this.testingDataInput.push(1.0);\n      const ref = this;\n      this.getSteering().then( function(value) {\n        //console.log(\"predicted steering: \"+value);\n        value = Math.min( value, 1 );\n        value = Math.max( value, 0 );\n        //console.log(\"predicted steering: \"+value);\n        ref.car.steeringPredicted = value;\n\n        let randomisation = 0;\n        if( ref.samples[0] ) {\n          if( ref.samples[0].reward < 0.5 ) {\n            randomisation = Math.min( 1, (ref.badRewards/ref.samples.length) * ref.badRewardsInARow );\n          }\n          else {\n            randomisation = 0.05;\n          }\n        }\n        else {\n\n          randomisation = 1;\n        }\n\n        //console.log(\"randomisation: \"+randomisation);\n        const random = Math.random();\n        let randomisedValue = value - randomisation*1 + random * randomisation*2;\n        randomisedValue = Math.min( randomisedValue, 1 );\n        randomisedValue = Math.max( randomisedValue, 0 );\n        ref.car.steering = randomisedValue;\n        //console.log(\"new steering: \"+randomisedValue);\n\n        if( ref.car.steering < 0.5 ) {\n          // left\n          const steeringStrength = (0.5 - ref.car.steering) * 2\n          ref.car.angle -= ref.car.steeringSpeed * steeringStrength;\n        }\n        else if( ref.car.steering > 0.5 ){\n          // right\n          const steeringStrength = (ref.car.steering - 0.5) * 2\n          ref.car.angle += ref.car.steeringSpeed * steeringStrength;\n        }\n\n        ref.car.x += Math.sin( ref.car.angle ) *ref.car.speed;\n        ref.car.y -= Math.cos( ref.car.angle ) *ref.car.speed;\n\n        ref.checkCarCollision();\n      });\n    },\n    getView() {\n      // view\n      this.car.viewX = this.car.x + Math.sin( this.car.angle ) * (this.car.length*0+this.viewSize/2);\n      this.car.viewY = this.car.y - Math.cos( this.car.angle ) * (this.car.length*0+this.viewSize/2);\n      // get view image\n      this.snapshotWhereViewIs = this.ctx.getImageData( this.car.viewX - this.ctxViewSnapshot.canvas.width/2, this.car.viewY - this.ctxViewSnapshot.canvas.height/2, this.ctxViewSnapshot.canvas.width, this.ctxViewSnapshot.canvas.height );\n      // read pixels\n      let viewSnapshotPixels = [];\n      for( let i = 0; i < this.snapshotWhereViewIs.data.length; i += 4 ) {\n        const r = this.snapshotWhereViewIs.data[i];\n        const g = this.snapshotWhereViewIs.data[i+1];\n        const b = this.snapshotWhereViewIs.data[i+2];\n        viewSnapshotPixels.push( [r,g,b] );\n      }\n      // draw rotated image\n      this.ctxViewSnapshot.save();\n      this.ctxViewSnapshot.clearRect( 0, 0, this.ctxViewSnapshot.canvas.width, this.ctxViewSnapshot.canvas.height );\n      this.ctxViewSnapshot.translate( this.ctxViewSnapshot.canvas.width/2, this.ctxViewSnapshot.canvas.height/2 );\n      this.ctxViewSnapshot.rotate( -this.car.angle );\n      this.ctxViewSnapshot.translate( -this.ctxViewSnapshot.canvas.width/2, -this.ctxViewSnapshot.canvas.height/2 );\n      for( let y = 0; y < this.ctxViewSnapshot.canvas.height; y++ ) {\n        for( let x = 0; x < this.ctxViewSnapshot.canvas.width; x++ ) {\n          const pixelIndex = y*this.ctxViewSnapshot.canvas.width + x;\n          const color = this.rgbToHex( viewSnapshotPixels[pixelIndex][0], viewSnapshotPixels[pixelIndex][1], viewSnapshotPixels[pixelIndex][2] );\n          this.ctxViewSnapshot.fillStyle = color;\n          this.ctxViewSnapshot.fillRect( x, y, 1.5, 1.5 );\n        }\n      }\n      this.ctxViewSnapshot.restore();\n      // get view image\n      this.imgWhereViewIs = this.ctxViewSnapshot.getImageData( this.ctxViewSnapshot.canvas.width/2 - this.ctxView.canvas.width/2, this.ctxViewSnapshot.canvas.height/2 - this.ctxView.canvas.height/2, this.ctxView.canvas.width, this.ctxView.canvas.height );\n      this.ctxView.putImageData(this.imgWhereViewIs, 0, 0);\n      // read pixels\n      let viewPixels = [];\n      for( let i = 0; i < this.imgWhereViewIs.data.length; i += 4 ) {\n        const r = this.imgWhereViewIs.data[i];\n        const g = this.imgWhereViewIs.data[i+1];\n        const b = this.imgWhereViewIs.data[i+2];\n        viewPixels.push( [r,g,b] );\n      }\n      let viewPixelsReduced = viewPixels;\n      for( let i = 0; i < this.viewReduction; i++ ) {\n        viewPixelsReduced = this.reducePixels( viewPixelsReduced, Math.sqrt(viewPixelsReduced.length) );\n      }\n      // draw reduced view\n      for( let y = 0; y < this.ctxViewReduced.canvas.height; y++ ) {\n        for( let x = 0; x < this.ctxViewReduced.canvas.width; x++ ) {\n          const pixelIndex = y*this.ctxViewReduced.canvas.width + x;\n          const color = this.rgbToHex( viewPixelsReduced[pixelIndex][0], viewPixelsReduced[pixelIndex][1], viewPixelsReduced[pixelIndex][2] );\n          this.ctxViewReduced.fillStyle = color;\n          this.ctxViewReduced.fillRect( x, y, 1.5, 1.5 );\n        }\n      }\n\n      let previousTotalBrightness;\n      // create sample\n      if( this.viewPixels ) {\n        // has previous state\n        this.samples.unshift( {\n          state: this.viewPixels,\n          action: this.car.steering,\n          actionPredicted: this.car.steeringPredicted\n        } );\n        //this.samples = this.samples.slice(0,this.samplesMaxLength);\n        previousTotalBrightness = this.totalBrightness;\n      }\n\n      // save new view pixels\n      this.viewPixels = [];\n      this.totalBrightness = 0;\n      for( let i = 0; i < viewPixelsReduced.length; i++ ) {\n        const brightness = (viewPixelsReduced[i][0] + viewPixelsReduced[i][1] + viewPixelsReduced[i][2]) / 765;\n        this.viewPixels.push( brightness );\n        this.totalBrightness += brightness;\n      }\n      this.totalBrightness = this.totalBrightness / this.viewPixels.length;\n\n      if( this.samples.length ) {\n        const brightnessChange = this.totalBrightness - previousTotalBrightness;\n        console.log(\"---\");\n        //console.log( \"totalBrightness: \"+ this.totalBrightness );\n        //console.log( \"previousTotalBrightness: \"+ previousTotalBrightness );\n        //console.log( \"brightnessChange: \"+ brightnessChange );\n        let reward;\n        if( brightnessChange >= 0 ) {\n          // better\n          if( this.totalBrightness > 0.5 ) {\n            // not so bad situation\n            reward = 1;\n          }\n          else {\n            // bad situation\n            reward = 0.75 + Math.min( 0.25, brightnessChange*10 * this.totalBrightness );\n          }\n          //reward = 1;\n          //console.log(reward+\": better\");\n        }\n        else {\n          // worse\n          if( this.totalBrightness < 0.5 ) {\n            // bad situation\n            reward = 0;\n          }\n          else {\n            // bad situation\n            reward = Math.min( 0.25, Math.abs(brightnessChange)*10 * this.totalBrightness );\n          }\n          reward = 0;\n          //console.log(reward+\": worse\");\n        }\n        this.samples[0].reward = reward;\n\n\n        // calculate total accuarcy\n        if( reward < 0.5 ) {\n          this.badRewards++;\n          this.badRewardsInARow++;\n        }\n        else {\n          this.badRewardsInARow = 0;\n        }\n\n\n        // trim samples:\n        if( this.samples.length === this.samplesMaxLength ) {\n          //console.log(\"max length reached: \"+this.samples.length);\n          if( this.samples[this.samples.length-1].reward < 0.5 ) {\n            //console.log(\"last is badReward\");\n            this.badRewards--;\n          }\n          //console.log(\"remove\");\n          this.samples = this.samples.slice(0,this.samplesMaxLength-1);\n          //console.log(\"new length: \" +this.samples.length);\n        }\n        console.log( \"good samples: \"+(this.samples.length-this.badRewards) +\" of \"+this.samples.length);\n\n      }\n      else {\n        // first cycle\n        this.badRewards = 0;\n        this.badRewardsInARow = 0;\n      }\n\n    },\n    checkCarCollision() {\n      // get car image\n      this.snapshotWhereCarIs = this.ctx.getImageData( this.car.x - this.ctxCarSnapshot.canvas.width/2, this.car.y - this.ctxCarSnapshot.canvas.height/2, this.ctxCarSnapshot.canvas.width, this.ctxCarSnapshot.canvas.height );\n      // read pixels\n      let carSnapshotPixels = [];\n      for( let i = 0; i < this.snapshotWhereCarIs.data.length; i += 4 ) {\n        const r = this.snapshotWhereCarIs.data[i];\n        const g = this.snapshotWhereCarIs.data[i+1];\n        const b = this.snapshotWhereCarIs.data[i+2];\n        carSnapshotPixels.push( [r,g,b] );\n      }\n      // draw rotated image\n      this.ctxCarSnapshot.save();\n      this.ctxCarSnapshot.clearRect( 0, 0, this.ctxCarSnapshot.canvas.width, this.ctxCarSnapshot.canvas.height );\n      this.ctxCarSnapshot.translate( this.ctxCarSnapshot.canvas.width/2, this.ctxCarSnapshot.canvas.height/2 );\n      this.ctxCarSnapshot.rotate( -this.car.angle );\n      this.ctxCarSnapshot.translate( -this.ctxCarSnapshot.canvas.width/2, -this.ctxCarSnapshot.canvas.height/2 );\n      for( let y = 0; y < this.ctxCarSnapshot.canvas.height; y++ ) {\n        for( let x = 0; x < this.ctxCarSnapshot.canvas.width; x++ ) {\n          const pixelIndex = y*this.ctxCarSnapshot.canvas.width + x;\n          const color = this.rgbToHex( carSnapshotPixels[pixelIndex][0], carSnapshotPixels[pixelIndex][1], carSnapshotPixels[pixelIndex][2] );\n          this.ctxCarSnapshot.fillStyle = color;\n          this.ctxCarSnapshot.fillRect( x, y, 1.5, 1.5 );\n        }\n      }\n      this.ctxCarSnapshot.restore();\n      // get car image\n      this.imgWhereCarIs = this.ctxCarSnapshot.getImageData( this.ctxCarSnapshot.canvas.width/2 - this.ctxCar.canvas.width/2, this.ctxCarSnapshot.canvas.height/2 - this.ctxCar.canvas.height/2, this.ctxCar.canvas.width, this.ctxCar.canvas.height );\n      this.ctxCar.putImageData(this.imgWhereCarIs, 0, 0);\n\n\n\n      this.drawCarAndViewSquare();\n\n\n      // read pixels\n      let totalR = 0;\n      let totalG = 0;\n      let totalB = 0;\n      for( let i = 0; i < this.imgWhereCarIs.data.length; i += 4 ) {\n        totalR += this.imgWhereCarIs.data[i];\n        totalG += this.imgWhereCarIs.data[i+1];\n        totalB += this.imgWhereCarIs.data[i+2];\n      }\n      totalR = Math.round( totalR / (this.imgWhereCarIs.data.length /4) );\n      totalG = Math.round( totalG / (this.imgWhereCarIs.data.length /4) );\n      totalB = Math.round( totalB / (this.imgWhereCarIs.data.length /4) );\n      if( totalR + totalG + totalB < 760 ) {\n        console.log(\"collision!\");\n\n        this.viewPixels = null;\n        this.car.steering = undefined;\n        this.resetCar();\n\n        if( this.highscores.length < this.highscoresMaxLength || this.score > this.highscores[this.highscoresMaxLength-1].score ) {\n          console.log(\"new highscore\");\n\n          this.highscores.push( {\n            score: this.score,\n            samples: [...this.samples],\n            modelIndex: this.modelIndex\n          } );\n          this.highscores.sort(function(a, b){return b.score - a.score});\n          this.highscores = this.highscores.slice(0,this.highscoresMaxLength);\n        }\n        console.log(\"train\");\n        this.train();\n\n        this.drawStats();\n\n        this.samples = [];\n        this.lastScore = this.score;\n        this.score = 0;\n\n        //this.refreshLoop = null;\n      }\n      else {\n        this.score++;\n        this.drawStats();\n      }\n    },\n    drawCarAndViewSquare() {\n      // draw car\n      this.ctx.save();\n      this.ctx.translate( this.car.x, this.car.y );\n      this.ctx.rotate( this.car.angle );\n      this.ctx.translate( -this.car.x, -this.car.y );\n      this.ctx.fillRect( this.car.x -this.car.width/2, this.car.y -this.car.length/2, this.car.width, this.car.length );\n      this.ctx.restore();\n\n      // draw view rect\n      this.ctx.save();\n      this.ctx.translate( this.car.viewX, this.car.viewY );\n      this.ctx.rotate( this.car.angle );\n      this.ctx.translate( -this.car.viewX, -this.car.viewY );\n      this.ctx.strokeStyle = \"#ff0000\";\n      this.ctx.beginPath();\n      this.ctx.rect( this.car.viewX -this.ctxView.canvas.width/2, this.car.viewY -this.ctxView.canvas.height/2, this.ctxView.canvas.width, this.ctxView.canvas.height );\n      this.ctx.stroke();\n      this.ctx.restore();\n    },\n    componentToHex(c) {\n      var hex = c.toString(16);\n      return hex.length == 1 ? \"0\" + hex : hex;\n    },\n    rgbToHex(r, g, b) {\n      return \"#\" + this.componentToHex(r) + this.componentToHex(g) + this.componentToHex(b);\n    },\n    reducePixels(pixels,size) {\n      // reduce resolution\n      let pixelsReduced = [];\n      for( let y = 0; y < size; y+=2 ) {\n        for( let x = 0; x < size; x+=2 ) {\n          const pixelIndexes = [\n            y*size + x,\n            y*size + x +1,\n            (y+1)*size + x,\n            (y+1)*size + x +1,\n          ];\n\n          let totalR = 0;\n          let totalG = 0;\n          let totalB = 0;\n          for( let i = 0; i < pixelIndexes.length; i++ ) {\n            totalR += pixels[pixelIndexes[i]][0];\n            totalG += pixels[pixelIndexes[i]][1];\n            totalB += pixels[pixelIndexes[i]][2];\n          }\n          totalR = Math.round( totalR / pixelIndexes.length );\n          totalG = Math.round( totalG / pixelIndexes.length );\n          totalB = Math.round( totalB / pixelIndexes.length );\n          pixelsReduced.push( [totalR,totalG,totalB] );\n        }\n      }\n      return pixelsReduced;\n    },\n    drawWorld() {\n      this.ctx.clearRect( 0, 0, this.ctx.canvas.width, this.ctx.canvas.height );\n      this.ctx.drawImage( this.imgWorld, 0, 0, this.ctx.canvas.width, this.ctx.canvas.height );\n    },\n    resetCar() {\n      console.log( \"reset car\");\n      this.car.x = this.worldWidth / 2 * 0.25;\n      this.car.y = this.worldHeight / 2 * 1.5;\n      this.car.angle = 0;\n    },\n    /*\n    keyDown(e) {\n      if( e.code === \"ArrowLeft\" ) {\n        this.car.steering = 0;\n      }\n      else if( e.code === \"ArrowRight\" ) {\n        this.car.steering = 1;\n      }\n    },\n    keyUp(e) {\n      if( e.code === \"ArrowLeft\" ) {\n        this.car.steering = undefined;\n      }\n      else if( e.code === \"ArrowRight\" ) {\n        this.car.steering = undefined;\n      }\n    }\n    */\n  }\n}\n</script>\n\n<style lang=\"scss\">\n\nbody {\n  margin: 0;\n  height: 100vh;\n  font-family: sans-serif;\n  font-size: 16px;\n  line-height: 150%;\n  background-color: black;\n  color: white;\n}\nlabel {\n  font-size: 13px;\n}\n#app {\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n  max-width: 100vh;\n}\n\n.world {\n  position: relative;\n  width: 100%;\n  height: 0;\n  padding-top: 100%;\n  .world-canvas {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n  .training {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 20%;\n    height: 20%;\n    position: absolute;\n    top: 40%;\n    left: 40%;\n    span {\n      text-align: center;\n    }\n  }\n}\n\n\n.car-snapshot-canvas {\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  border: 1px solid white;\n  image-rendering: pixelated;\n  width: 10%;\n  display: none;\n}\n.car-canvas {\n  position: absolute;\n  bottom: 8px;\n  left: 8px;\n  border: 1px solid white;\n  image-rendering: pixelated;\n  width: 15%;\n  display: none;\n}\n.view-snapshot-canvas {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  border: 1px solid white;\n  image-rendering: pixelated;\n  width: 10%;\n  display: none;\n}\n.view-canvas {\n  position: absolute;\n  bottom: 8px;\n  right: 8px;\n  border: 1px solid white;\n  image-rendering: pixelated;\n  width: 10%;\n  display: none;\n}\n.view-canvas-reduced {\n  position: absolute;\n  bottom: 8px;\n  right: 8px;\n  border: 1px solid red;\n  image-rendering: pixelated;\n  width: 15%;\n}\n\n\n\n.fps {\n  position: absolute;\n  top: 8px;\n  left: 50%;\n  color: #333333;\n}\n\n.highscores {\n  position: absolute;\n  top: 16px;\n  right: 16px;\n  text-align: right;\n\n  .duration {\n    margin-bottom: 16px;\n  }\n\n  label {\n    display: block;\n    font-weight: bold;\n    margin-bottom: 8px;\n  }\n  ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    li {\n      &:first-child {\n        font-size: 20px;\n        line-height: 150%;\n      }\n      &:nth-child(2),\n      &:nth-child(3) {\n        font-size: 16px;\n        line-height: 20px;\n      }\n      display: block;\n      font-size: 13px;\n      line-height: 16px;\n    }\n  }\n\n}\n\n\n.score {\n  position: absolute;\n  right: calc( 15% + 48px);\n  bottom: 48px;\n  text-align: right;\n  label {\n    display: block;\n    font-weight: bold;\n    margin-bottom: 8px;\n  }\n\n  .last {\n    margin-top: 16px;\n    font-size: 25px;\n    label {\n      font-size: 16px;\n    }\n  }\n}\n\n.stats {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  .stats-canvas {\n    height: 100%;\n    border-right: 1px solid #333;\n  }\n  &:before {\n    content: '';\n    position: absolute;\n    display: block;\n    width: 50%;\n    height: 100%;\n    border-right: 1px solid #666666;\n  }\n}\n\n.models {\n  position: absolute;\n  top: 0;\n  left: 7.5%;\n  label {\n    display: block;\n    font-weight: bold;\n    margin-bottom: 8px;\n  }\n  ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    li {\n      color: #cccccc;\n      font-size: 13px;\n      line-height: 125%;\n      &.active {\n        font-weight: bold;\n        font-size: 25px;\n      }\n      .layers {\n        font-size: 10px;\n      }\n    }\n  }\n}\n\n</style>\n"]}]}